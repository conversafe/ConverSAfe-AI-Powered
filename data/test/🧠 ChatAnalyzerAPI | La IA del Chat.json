{
  "info": {
    "_postman_id": "7a8b9c2d-4e5f-6789-abc1-def234567890",
    "name": "üß† ConverSafe Chat Analyzer API | An√°lisis de Conversaciones con IA",
    "description": "Colecci√≥n para probar el servicio de an√°lisis de conversaciones que utiliza FastAPI y Google Gemini AI para extraer insights de chats de equipos de desarrollo.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "613062"
  },
  "item": [
    {
      "name": "Precondiciones",
      "item": [
        {
          "name": "SETUP: Verificar servicio activo",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log(\"üß™ Verificando que el servicio de an√°lisis est√© activo...\");",
                  "",
                  "// Si baseUrlAI no est√° definido, usar localhost por defecto",
                  "let defaultUrl = 'http://127.0.0.1:8000';",
                  "if (!pm.environment.get('baseUrlAI')) {",
                  "    pm.environment.set('baseUrlAI', defaultUrl);",
                  "    console.log('‚ö†Ô∏è baseUrlAI no definido. Usando por defecto:', defaultUrl);",
                  "} else {",
                  "    console.log('üåê baseUrlAI:', pm.environment.get('baseUrlAI'));",
                  "}",
                  "",
                  "pm.test(\"‚úÖ Deber√≠a tener baseUrlAI definido\", function () {",
                  "    pm.expect(pm.environment.get('baseUrlAI')).to.exist;",
                  "});",
                  "",
                  "pm.test(\"‚úÖ Servicio deber√≠a estar corriendo\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"‚úÖ Deber√≠a retornar status de servicio activo\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('Chat Analysis Service is running');",
                  "});",
                  "",
                  "console.log('üöÄ Servicio de an√°lisis verificado y listo para pruebas');"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrlAI}}/",
              "host": ["{{baseUrlAI}}"],
              "path": [""]
            },
            "description": "Verificar que el servicio FastAPI est√© corriendo correctamente"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üîç POST /analizar_conversacion - An√°lisis Principal",
      "item": [
        {
          "name": "TC1: Deber√≠a analizar conversaci√≥n con bloqueadores t√©cnicos",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Deber√≠a responder con c√≥digo 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a retornar estructura completa de an√°lisis\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.usuarios).to.be.an('array');",
                  "    pm.expect(jsonData.equipo).to.exist;",
                  "    pm.expect(jsonData.decisiones_pendientes).to.be.an('array');",
                  "    pm.expect(jsonData.conceptos_detectados).to.exist;",
                  "    pm.expect(jsonData.feedback_asistente).to.be.an('array');",
                  "    pm.expect(jsonData.resumen_general).to.be.a('string');",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a detectar usuarios participantes\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.usuarios.length).to.be.above(0);",
                  "    jsonData.usuarios.forEach(function(usuario) {",
                  "        pm.expect(usuario.nombre).to.exist;",
                  "        pm.expect(usuario.participacion).to.be.a('number');",
                  "        pm.expect(usuario.eficacia_comunicacion).to.exist;",
                  "        pm.expect(usuario.enfoque_conversacion).to.exist;",
                  "    });",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a incluir m√©tricas del equipo\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.equipo.nivel_conflicto_colaboracion).to.be.a('number');",
                  "    pm.expect(jsonData.equipo.estado_actual).to.exist;",
                  "    pm.expect(jsonData.equipo.rendimiento_laboral).to.be.a('number');",
                  "    pm.expect(jsonData.equipo.actividad).to.exist;",
                  "    pm.expect(jsonData.equipo.actividad.miembros_activos).to.be.a('number');",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a detectar conceptos clave\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var conceptos = jsonData.conceptos_detectados;",
                  "    pm.expect(conceptos.bloqueadores_tecnicos).to.be.an('array');",
                  "    pm.expect(conceptos.cuellos_de_botella).to.be.an('array');",
                  "    pm.expect(conceptos.riesgos_proyecto).to.be.an('array');",
                  "    pm.expect(conceptos.decisiones_clave).to.be.an('array');",
                  "});",
                  "",
                  "console.log('‚úÖ An√°lisis completado - Conceptos detectados:', JSON.stringify(pm.response.json().conceptos_detectados, null, 2));"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"mensajes\": [\n        {\n            \"usuario\": \"Alex\",\n            \"texto\": \"Necesitamos resolver este bug urgente, nos est√° dando muchos problemas y no hay nadie arregl√°ndolo. Esto podr√≠a retrasar el release.\",\n            \"marca_de_tiempo\": \"2024-12-10T10:00:00Z\"\n        },\n        {\n            \"usuario\": \"Maria\",\n            \"texto\": \"Estoy trabajando en eso ahora mismo. Necesito acceso a la base de datos de producci√≥n para debuggear.\",\n            \"marca_de_tiempo\": \"2024-12-10T10:01:00Z\"\n        },\n        {\n            \"usuario\": \"Carlos\",\n            \"texto\": \"¬øPodemos postponer algunas features para cumplir con la fecha? El cliente est√° presionando mucho.\",\n            \"marca_de_tiempo\": \"2024-12-10T10:05:00Z\"\n        },\n        {\n            \"usuario\": \"Ana\",\n            \"texto\": \"Yo puedo ayudar con el frontend si liberan el backend. Pero necesitamos definir bien los requirements.\",\n            \"marca_de_tiempo\": \"2024-12-10T10:07:00Z\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{baseUrlAI}}/analizar_conversacion",
              "host": ["{{baseUrlAI}}"],
              "path": ["analizar_conversacion"]
            }
          },
          "response": []
        },
        {
          "name": "TC2: Deber√≠a analizar conversaci√≥n simple y colaborativa",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Deber√≠a responder con c√≥digo 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a identificar menor cantidad de riesgos\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    // En conversaci√≥n colaborativa deber√≠a haber menos riesgos",
                  "    pm.expect(jsonData.conceptos_detectados.riesgos_proyecto.length).to.be.lessThan(3);",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a mostrar equipo colaborativo\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.equipo.estado_actual).to.be.oneOf(['colaborador', 'conflictivo']);",
                  "    pm.expect(jsonData.equipo.nivel_conflicto_colaboracion).to.be.above(50);",
                  "});",
                  "",
                  "console.log('‚úÖ An√°lisis de conversaci√≥n colaborativa completado');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"mensajes\": [\n        {\n            \"usuario\": \"Dev1\",\n            \"texto\": \"La feature est√° lista para testing\",\n            \"marca_de_tiempo\": \"2024-12-10T09:00:00Z\"\n        },\n        {\n            \"usuario\": \"QA1\",\n            \"texto\": \"Perfecto, empiezo las pruebas ahora. ¬øAlg√∫n caso espec√≠fico que deba revisar?\",\n            \"marca_de_tiempo\": \"2024-12-10T09:01:00Z\"\n        },\n        {\n            \"usuario\": \"Dev1\",\n            \"texto\": \"S√≠, por favor revisa el flujo de login y el manejo de errores en el formulario.\",\n            \"marca_de_tiempo\": \"2024-12-10T09:02:00Z\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{baseUrlAI}}/analizar_conversacion",
              "host": ["{{baseUrlAI}}"],
              "path": ["analizar_conversacion"]
            }
          },
          "response": []
        },
        {
          "name": "TC3: Deber√≠a fallar con payload vac√≠o",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Deber√≠a responder con c√≥digo 422 Validation Error\", function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a retornar detalles del error de validaci√≥n\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.detail).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{baseUrlAI}}/analizar_conversacion",
              "host": ["{{baseUrlAI}}"],
              "path": ["analizar_conversacion"]
            }
          },
          "response": []
        },
        {
          "name": "TC4: Deber√≠a fallar con estructura incorrecta de mensajes",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Deber√≠a responder con c√≥digo 422 Validation Error\", function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a indicar error en estructura de mensajes\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.detail).to.exist;",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"mensajes\": [\n        {\n            \"usuario\": \"Test\",\n            \"texto_incorrecto\": \"Campo equivocado\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{baseUrlAI}}/analizar_conversacion",
              "host": ["{{baseUrlAI}}"],
              "path": ["analizar_conversacion"]
            }
          },
          "response": []
        },
        {
          "name": "TC5: Deber√≠a manejar conversaci√≥n con decisiones pendientes",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Deber√≠a responder con c√≥digo 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a detectar decisiones pendientes\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.decisiones_pendientes).to.be.an('array');",
                  "    // Esperamos que detecte al menos una decisi√≥n pendiente",
                  "    pm.expect(jsonData.decisiones_pendientes.length).to.be.above(0);",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a detectar hitos y plazos\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.conceptos_detectados.hitos_plazos).to.be.an('array');",
                  "});",
                  "",
                  "console.log('üìã Decisiones pendientes detectadas:', pm.response.json().decisiones_pendientes);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"mensajes\": [\n        {\n            \"usuario\": \"ProjectManager\",\n            \"texto\": \"Necesitamos decidir si vamos con la arquitectura A o B antes del viernes. Tambi√©n pendiente definir el stack de testing.\",\n            \"marca_de_tiempo\": \"2024-12-10T14:00:00Z\"\n        },\n        {\n            \"usuario\": \"TechLead\",\n            \"texto\": \"Yo voto por arquitectura A, pero necesitamos la aprobaci√≥n del cliente antes de proceder.\",\n            \"marca_de_tiempo\": \"2024-12-10T14:02:00Z\"\n        },\n        {\n            \"usuario\": \"Developer\",\n            \"texto\": \"¬øCu√°ndo es la deadline final? Necesito saber para planificar mis tareas.\",\n            \"marca_de_tiempo\": \"2024-12-10T14:05:00Z\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{baseUrlAI}}/analizar_conversacion",
              "host": ["{{baseUrlAI}}"],
              "path": ["analizar_conversacion"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "üîß Casos Edge y L√≠mites",
      "item": [
        {
          "name": "TC6: Deber√≠a manejar conversaci√≥n con un solo mensaje",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Deber√≠a responder con c√≥digo 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a manejar usuario √∫nico correctamente\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.usuarios.length).to.eql(1);",
                  "    pm.expect(jsonData.usuarios[0].participacion).to.eql(100);",
                  "});",
                  "",
                  "pm.test(\"Actividad del equipo deber√≠a reflejar baja participaci√≥n\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.equipo.actividad.miembros_activos).to.eql(1);",
                  "    pm.expect(jsonData.equipo.actividad.mensajes_de_hoy).to.eql(1);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"mensajes\": [\n        {\n            \"usuario\": \"SoloUser\",\n            \"texto\": \"Trabajando en la documentaci√≥n de la API\",\n            \"marca_de_tiempo\": \"2024-12-10T16:00:00Z\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{baseUrlAI}}/analizar_conversacion",
              "host": ["{{baseUrlAI}}"],
              "path": ["analizar_conversacion"]
            }
          },
          "response": []
        },
        {
          "name": "TC7: Deber√≠a fallar sin API Key de Gemini",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Deber√≠a responder con c√≥digo 500 Internal Server Error\", function () {",
                  "    pm.response.to.have.status(500);",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a indicar error de configuraci√≥n\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.detail).to.exist;",
                  "    pm.expect(jsonData.detail).to.include('Error al procesar');",
                  "});"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"mensajes\": [\n        {\n            \"usuario\": \"Test\",\n            \"texto\": \"Mensaje de prueba cuando no hay API key\",\n            \"marca_de_tiempo\": \"2024-12-10T16:00:00Z\"\n        }\n    ]\n}"
            },
            "url": {
              "raw": "{{baseUrlAI}}/analizar_conversacion",
              "host": ["{{baseUrlAI}}"],
              "path": ["analizar_conversacion"]
            },
            "description": "Este test fallar√° si GEMINI_API_KEY no est√° configurada"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": ["// Script global que se ejecuta antes de cada request", "console.log('üöÄ Preparando request para:', pm.request.name);"]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Script global que se ejecuta despu√©s de cada request",
          "console.log('‚úÖ Request completado:', pm.request.name, '- Status:', pm.response.status);"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrlAI",
      "value": "http://127.0.0.1:8000",
      "type": "string"
    }
  ]
}
