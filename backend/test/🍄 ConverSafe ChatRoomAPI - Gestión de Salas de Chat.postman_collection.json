{
  "info": {
    "_postman_id": "a7b8c9d0-1234-5678-9abc-def012345678",
    "name": "üçÑ ConverSafe ChatRoomAPI | Gesti√≥n de Salas de Chat",
    "description": "Colecci√≥n especializada para probar exhaustivamente los endpoints de gesti√≥n de salas de chat de ConverSafe API seg√∫n docs/chatRoomAPI.md y docs/metricsAPI.md. Formato TC# con validaciones 'Deber√≠a'.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "613062"
  },
  "item": [
    {
      "name": "Precondiciones",
      "item": [
        {
          "name": "SETUP: Preparar entorno de pruebas",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log(\"üß™ Ejecutando SETUP de entorno de pruebas...\");",
                  "",
                  "// Setear timestamp √∫nico para salas de prueba",
                  "pm.environment.set('testTimestamp', Date.now());",
                  "",
                  "// Si baseUrl no est√° definido, usar localhost por defecto",
                  "let defaultUrl = 'http://localhost:3000';",
                  "if (!pm.environment.get('baseUrl')) {",
                  "    pm.environment.set('baseUrl', defaultUrl);",
                  "    console.log('‚ö†Ô∏è baseUrl no definido. Usando por defecto:', defaultUrl);",
                  "} else {",
                  "    console.log('üåê baseUrl:', pm.environment.get('baseUrl'));",
                  "}",
                  "",
                  "// Validar que baseUrl est√© definida",
                  "pm.test(\"‚úÖ Deber√≠a tener baseUrl definido\", function () {",
                  "    pm.expect(pm.environment.get('baseUrl')).to.exist;",
                  "});",
                  "",
                  "// Validar que el servidor responde correctamente",
                  "pm.test(\"‚úÖ Servidor responde (cualquier c√≥digo v√°lido)\", function () {",
                  "    pm.expect(pm.response.code).to.be.within(200, 499);",
                  "});",
                  "",
                  "// Limpiar variables antiguas de entorno",
                  "console.log(\"üßπ Limpiando variables de entorno...\");",
                  "const vars = [",
                  "    'testRoomId', 'testRoomName', 'testAccessCode', 'adminToken',",
                  "    'userToken', 'testUserId', 'testAdminId', 'roomsToCleanup'",
                  "];",
                  "vars.forEach(key => pm.environment.unset(key));",
                  "console.log(\"üîÅ Variables limpiadas:\", vars);",
                  "",
                  "// Advertir sobre tokens necesarios",
                  "if (!pm.environment.get('adminToken')) {",
                  "    console.log('‚ö†Ô∏è IMPORTANTE: Necesitas definir adminToken en el entorno');",
                  "}",
                  "if (!pm.environment.get('userToken')) {",
                  "    console.log('‚ö†Ô∏è IMPORTANTE: Necesitas definir userToken en el entorno');",
                  "}"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            },
            "description": "Request inicial para verificar que el servidor est√© funcionando"
          },
          "response": []
        }
      ]
    },
    {
      "name": "üõ† POST /chatrooms - Crear Sala",
      "item": [
        {
          "name": "TC1: Deber√≠a crear sala de chat con datos v√°lidos (admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Deber√≠a responder con c√≥digo 201 Created\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a crear la sala correctamente\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Room created\");",
                  "    pm.expect(jsonData.roomId).to.exist;",
                  "    pm.expect(jsonData.accessCode).to.exist;",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a generar roomId v√°lido (MongoDB ObjectId)\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.roomId).to.match(/^[0-9a-fA-F]{24}$/);",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a generar accessCode v√°lido\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.accessCode).to.be.a('string');",
                  "    pm.expect(jsonData.accessCode).to.have.length.above(5);",
                  "});",
                  "",
                  "// Guardar datos para pruebas posteriores",
                  "if (pm.response.code === 201) {",
                  "    var room = pm.response.json();",
                  "    pm.environment.set(\"testRoomId\", room.roomId);",
                  "    pm.environment.set(\"testAccessCode\", room.accessCode);",
                  "    pm.environment.set(\"testRoomName\", \"Sprint Planning Test\");",
                  "    console.log(\"üíæ Guardado roomId:\", room.roomId);",
                  "    console.log(\"üíæ Guardado accessCode:\", room.accessCode);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Sprint Planning Test\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/chatrooms",
              "host": ["{{baseUrl}}"],
              "path": ["chatrooms"]
            }
          },
          "response": []
        },
        {
          "name": "TC2: Deber√≠a fallar sin token de autorizaci√≥n",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Deber√≠a responder con c√≥digo 401 Unauthorized\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a retornar mensaje de error de autorizaci√≥n\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Room\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/chatrooms",
              "host": ["{{baseUrl}}"],
              "path": ["chatrooms"]
            }
          },
          "response": []
        },
        {
          "name": "TC3: Deber√≠a fallar con token de usuario (no admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Deber√≠a responder con c√≥digo 403 Forbidden\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a retornar mensaje de permisos insuficientes\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Room\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/chatrooms",
              "host": ["{{baseUrl}}"],
              "path": ["chatrooms"]
            }
          },
          "response": []
        },
        {
          "name": "TC4: Deber√≠a fallar sin nombre de sala",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Deber√≠a responder con c√≥digo 400 Bad Request\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a retornar mensaje de validaci√≥n\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{baseUrl}}/chatrooms",
              "host": ["{{baseUrl}}"],
              "path": ["chatrooms"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "üîç GET /chatrooms/:id - Obtener Sala",
      "item": [
        {
          "name": "TC5: Deber√≠a obtener datos de sala existente",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Deber√≠a responder con c√≥digo 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a retornar estructura completa de la sala\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.exist;",
                  "    pm.expect(jsonData.name).to.exist;",
                  "    pm.expect(jsonData.admin).to.exist;",
                  "    pm.expect(jsonData.participants).to.be.an('array');",
                  "    pm.expect(jsonData.accessCode).to.exist;",
                  "    pm.expect(jsonData.messages).to.be.an('array');",
                  "    pm.expect(jsonData.createdAt).to.exist;",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a tener admin con datos completos\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.admin._id).to.exist;",
                  "    pm.expect(jsonData.admin.name).to.exist;",
                  "    pm.expect(jsonData.admin.email).to.exist;",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a tener el mismo ID que se guard√≥\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.eql(pm.environment.get('testRoomId'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/chatrooms/{{testRoomId}}",
              "host": ["{{baseUrl}}"],
              "path": ["chatrooms", "{{testRoomId}}"]
            }
          },
          "response": []
        },
        {
          "name": "TC6: Deber√≠a fallar con ID inv√°lido",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Deber√≠a responder con c√≥digo 404 Not Found\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a retornar mensaje de error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/chatrooms/660fcf2923ae3644b86dd999",
              "host": ["{{baseUrl}}"],
              "path": ["chatrooms", "660fcf2923ae3644b86dd999"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "ü§ù POST /chatrooms/join - Unirse a Sala",
      "item": [
        {
          "name": "TC7: Deber√≠a unirse a sala con accessCode v√°lido",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Deber√≠a responder con c√≥digo 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a confirmar la uni√≥n a la sala\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Joined room\");",
                  "    pm.expect(jsonData.roomId).to.exist;",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a retornar el mismo roomId\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.roomId).to.eql(pm.environment.get('testRoomId'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"accessCode\": \"{{testAccessCode}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/chatrooms/join",
              "host": ["{{baseUrl}}"],
              "path": ["chatrooms", "join"]
            }
          },
          "response": []
        },
        {
          "name": "TC8: Deber√≠a fallar con accessCode inv√°lido",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Deber√≠a responder con c√≥digo 404 Not Found\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a retornar mensaje de error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"accessCode\": \"invalidcode123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/chatrooms/join",
              "host": ["{{baseUrl}}"],
              "path": ["chatrooms", "join"]
            }
          },
          "response": []
        },
        {
          "name": "TC9: Deber√≠a fallar sin accessCode",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Deber√≠a responder con c√≥digo 400 Bad Request\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a retornar mensaje de validaci√≥n\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{baseUrl}}/chatrooms/join",
              "host": ["{{baseUrl}}"],
              "path": ["chatrooms", "join"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "üî• GET /chatrooms/member - Salas del Usuario",
      "item": [
        {
          "name": "TC10: Deber√≠a obtener salas donde el usuario es participante",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Deber√≠a responder con c√≥digo 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a retornar array de salas\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Cada sala deber√≠a tener estructura v√°lida\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        jsonData.forEach(function(room) {",
                  "            pm.expect(room._id).to.exist;",
                  "            pm.expect(room.name).to.exist;",
                  "            pm.expect(room.admin).to.exist;",
                  "            pm.expect(room.accessCode).to.exist;",
                  "            pm.expect(room.createdAt).to.exist;",
                  "        });",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a incluir la sala de prueba creada\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var testRoomId = pm.environment.get('testRoomId');",
                  "    var foundRoom = jsonData.find(room => room._id === testRoomId);",
                  "    pm.expect(foundRoom).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/chatrooms/member",
              "host": ["{{baseUrl}}"],
              "path": ["chatrooms", "member"]
            }
          },
          "response": []
        },
        {
          "name": "TC11: Usuario normal deber√≠a ver salas donde es participante",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Deber√≠a responder con c√≥digo 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a retornar array de salas\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a incluir la sala donde se uni√≥\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var testRoomId = pm.environment.get('testRoomId');",
                  "    var foundRoom = jsonData.find(room => room._id === testRoomId);",
                  "    pm.expect(foundRoom).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/chatrooms/member",
              "host": ["{{baseUrl}}"],
              "path": ["chatrooms", "member"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "üìä GET /chatrooms/:id/metrics - M√©tricas de Sala",
      "item": [
        {
          "name": "TC12: Deber√≠a obtener m√©tricas de participaci√≥n (admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Deber√≠a responder con c√≥digo 200 OK\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a retornar estructura completa de m√©tricas\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.roomId).to.exist;",
                  "    pm.expect(jsonData.roomName).to.exist;",
                  "    pm.expect(jsonData.admin).to.exist;",
                  "    pm.expect(jsonData.totalMessages).to.be.a('number');",
                  "    pm.expect(jsonData.participants).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Cada participante deber√≠a tener m√©tricas v√°lidas\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    jsonData.participants.forEach(function(participant) {",
                  "        pm.expect(participant._id).to.exist;",
                  "        pm.expect(participant.name).to.exist;",
                  "        pm.expect(participant.email).to.exist;",
                  "        pm.expect(participant.messagesSent).to.be.a('number');",
                  "        pm.expect(participant.participation).to.exist;",
                  "    });",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a coincidir con el roomId de prueba\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.roomId).to.eql(pm.environment.get('testRoomId'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/chatrooms/{{testRoomId}}/metrics",
              "host": ["{{baseUrl}}"],
              "path": ["chatrooms", "{{testRoomId}}", "metrics"]
            }
          },
          "response": []
        },
        {
          "name": "TC13: Deber√≠a fallar si no es admin de la sala",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Deber√≠a responder con c√≥digo 403 Forbidden\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a retornar mensaje de permisos insuficientes\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/chatrooms/{{testRoomId}}/metrics",
              "host": ["{{baseUrl}}"],
              "path": ["chatrooms", "{{testRoomId}}", "metrics"]
            }
          },
          "response": []
        },
        {
          "name": "TC14: Deber√≠a fallar con sala inexistente",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Deber√≠a responder con c√≥digo 404 Not Found\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Deber√≠a retornar mensaje de error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.exist;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{adminToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/chatrooms/660fcf2923ae3644b86dd999/metrics",
              "host": ["{{baseUrl}}"],
              "path": ["chatrooms", "660fcf2923ae3644b86dd999", "metrics"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "üßπ Cleanup",
      "item": [
        {
          "name": "CLEANUP: Limpiar datos de prueba",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log(\"üßπ Ejecutando limpieza de datos de prueba...\");",
                  "",
                  "// Aqu√≠ podr√≠as agregar l√≥gica para eliminar salas de prueba",
                  "// si tuvieras un endpoint DELETE para salas",
                  "",
                  "pm.test(\"‚úÖ Limpieza ejecutada\", function () {",
                  "    pm.expect(true).to.be.true;",
                  "});",
                  "",
                  "// Limpiar variables de entorno",
                  "const vars = [",
                  "    'testRoomId', 'testRoomName', 'testAccessCode'",
                  "];",
                  "vars.forEach(key => {",
                  "    pm.environment.unset(key);",
                  "    console.log('üóëÔ∏è Eliminada variable:', key);",
                  "});",
                  "",
                  "console.log(\"‚úÖ Limpieza completada\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            },
            "description": "Request de limpieza para eliminar datos de prueba"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": ["// Script global que se ejecuta antes de cada request", "console.log('üöÄ Ejecutando request:', pm.info.requestName);"]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Script global que se ejecuta despu√©s de cada request",
          "console.log('‚úÖ Request completado:', pm.info.requestName, '- Status:', pm.response.code);"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    }
  ]
}
